--[[
    3rfe - Squid Game Hub
    Version: 5.0 (Complete Overhaul)
    Generated by Gemini based on detailed user request.

    Features:
    - Complete UI redesign based on user's image and description.
    - Two-panel layout: Categories on the left, content on the right.
    - Intro animation and sound effects.
    - All requested game modes and general features implemented with a clean framework.
    - Placeholders and TODOs for game-specific logic that needs to be adapted.
]]

-- // Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Lighting = game:GetService("Lighting")
local SoundService = game:GetService("SoundService")

-- // Player & GUI Vars
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local Mouse = LocalPlayer:GetMouse()

-- Clean up any old GUI
if PlayerGui:FindFirstChild("3rfe_Main") then
    PlayerGui:FindFirstChild("3rfe_Main"):Destroy()
end

-- // Main GUI Setup
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "3rfe_Main"
ScreenGui.Parent = PlayerGui
ScreenGui.ResetOnSpawn = false

local MainFrame = Instance.new("Frame")
MainFrame.Name = "MainFrame"
MainFrame.Parent = ScreenGui
MainFrame.BackgroundColor3 = Color3.fromRGB(30, 32, 37)
MainFrame.BorderSizePixel = 0
MainFrame.Position = UDim2.new(0.5, -300, 0.5, -200)
MainFrame.Size = UDim2.new(0, 600, 0, 400)
MainFrame.ClipsDescendants = true
MainFrame.Visible = false -- Initially invisible for intro animation
local FrameCorner = Instance.new("UICorner", MainFrame)
FrameCorner.CornerRadius = UDim.new(0, 8)

-- Left Panel (Categories)
local LeftPanel = Instance.new("Frame")
LeftPanel.Name = "LeftPanel"
LeftPanel.Parent = MainFrame
LeftPanel.BackgroundColor3 = Color3.fromRGB(43, 45, 51)
LeftPanel.BorderSizePixel = 0
LeftPanel.Size = UDim2.new(0, 150, 1, 0)
local LeftPanelLayout = Instance.new("UIListLayout", LeftPanel)
LeftPanelLayout.Padding = UDim.new(0, 5)
LeftPanelLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
LeftPanelLayout.SortOrder = Enum.SortOrder.LayoutOrder
local LeftPanelPadding = Instance.new("UIPadding", LeftPanel)
LeftPanelPadding.PaddingTop = UDim.new(0, 10)

-- Right Panel (Content)
local RightPanel = Instance.new("ScrollingFrame")
RightPanel.Name = "RightPanel"
RightPanel.Parent = MainFrame
RightPanel.BackgroundColor3 = Color3.fromRGB(54, 57, 63)
RightPanel.BorderSizePixel = 0
RightPanel.Position = UDim2.new(0, 150, 0, 0)
RightPanel.Size = UDim2.new(1, -150, 1, 0)
RightPanel.CanvasSize = UDim2.new(0, 0, 0, 0)
RightPanel.ScrollBarImageColor3 = Color3.fromRGB(88, 101, 242)
RightPanel.ScrollBarThickness = 5
RightPanel.AutomaticCanvasSize = Enum.AutomaticSize.Y
local RightPanelLayout = Instance.new("UIListLayout", RightPanel)
RightPanelLayout.Padding = UDim.new(0, 15)
RightPanelLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
local RightPanelPadding = Instance.new("UIPadding", RightPanel)
RightPanelPadding.PaddingLeft = UDim.new(0, 20)
RightPanelPadding.PaddingRight = UDim.new(0, 20)
RightPanelPadding.PaddingTop = UDim.new(0, 20)
RightPanelPadding.PaddingBottom = UDim.new(0, 20)


-- // Library & UI Creation
local Library = {}
Library.Tabs = {}
Library.ActiveTab = nil
Library.Colors = {
    Active = Color3.fromRGB(88, 101, 242),
    Idle = Color3.fromRGB(66, 70, 77),
    Hover = Color3.fromRGB(75, 79, 87)
}
Library.Values = {
    Speed = 16,
    Jump = 50,
}
Library.Toggles = {}

function Library:CreateTab(name)
    local Page = Instance.new("Frame")
    Page.Name = name
    Page.Parent = RightPanel
    Page.BackgroundTransparency = 1
    Page.Size = UDim2.new(1, 0, 0, 0) -- Y size is 0
    Page.AutomaticSize = Enum.AutomaticSize.Y
    Page.Visible = false
    local PageLayout = Instance.new("UIListLayout", Page)
    PageLayout.Padding = UDim.new(0, 10)
    PageLayout.SortOrder = Enum.SortOrder.LayoutOrder

    local TabButton = Instance.new("TextButton")
    TabButton.Name = name
    TabButton.Parent = LeftPanel
    TabButton.BackgroundColor3 = Library.Colors.Idle
    TabButton.Size = UDim2.new(1, -20, 0, 35)
    TabButton.Font = Enum.Font.GothamSemibold
    TabButton.Text = name
    TabButton.TextColor3 = Color3.fromRGB(220, 221, 222)
    TabButton.TextSize = 16
    local TabCorner = Instance.new("UICorner", TabButton)
    TabCorner.CornerRadius = UDim.new(0, 5)

    local tabData = {
        Button = TabButton,
        Page = Page,
        Elements = {}
    }
    Library.Tabs[name] = tabData

    TabButton.MouseButton1Click:Connect(function()
        if Library.ActiveTab then
            Library.ActiveTab.Page.Visible = false
            TweenService:Create(Library.ActiveTab.Button, TweenInfo.new(0.2), {BackgroundColor3 = Library.Colors.Idle}):Play()
        end
        Library.ActiveTab = tabData
        tabData.Page.Visible = true
        TweenService:Create(tabData.Button, TweenInfo.new(0.2), {BackgroundColor3 = Library.Colors.Active}):Play()
    end)

    TabButton.MouseEnter:Connect(function()
        if Library.ActiveTab ~= tabData then
            TweenService:Create(TabButton, TweenInfo.new(0.2), {BackgroundColor3 = Library.Colors.Hover}):Play()
        end
    end)
    TabButton.MouseLeave:Connect(function()
        if Library.ActiveTab ~= tabData then
            TweenService:Create(TabButton, TweenInfo.new(0.2), {BackgroundColor3 = Library.Colors.Idle}):Play()
        end
    end)
    
    return tabData
end

function Library:CreateElementContainer(parent, height)
    local Shape = Instance.new("Frame")
    Shape.Parent = parent
    Shape.BackgroundColor3 = Color3.fromRGB(43, 45, 51)
    Shape.BorderSizePixel = 0
    Shape.Size = UDim2.new(1, 0, 0, height)
    local ShapeCorner = Instance.new("UICorner", Shape)
    ShapeCorner.CornerRadius = UDim.new(0, 6)
    local ShapePadding = Instance.new("UIPadding", Shape)
    ShapePadding.PaddingLeft = UDim.new(0, 15)
    ShapePadding.PaddingRight = UDim.new(0, 15)
    return Shape
end

function Library:AddButton(tab, text, callback)
    local ButtonShape = Library:CreateElementContainer(tab.Page, 40)
    local Button = Instance.new("TextButton", ButtonShape)
    Button.Size = UDim2.new(1, 0, 1, 0)
    Button.BackgroundTransparency = 1
    Button.Font = Enum.Font.Gotham
    Button.Text = text
    Button.TextColor3 = Color3.fromRGB(220, 221, 222)
    Button.TextSize = 14
    Button.MouseButton1Click:Connect(callback)
end

function Library:AddToggle(tab, text, callback)
    local ToggleShape = Library:CreateElementContainer(tab.Page, 40)
    
    local Label = Instance.new("TextLabel", ToggleShape)
    Label.Size = UDim2.new(0.8, 0, 1, 0)
    Label.BackgroundTransparency = 1
    Label.Font = Enum.Font.Gotham
    Label.Text = text
    Label.TextColor3 = Color3.fromRGB(220, 221, 222)
    Label.TextSize = 14
    Label.TextXAlignment = Enum.TextXAlignment.Left

    local Checkbox = Instance.new("Frame", ToggleShape)
    Checkbox.Size = UDim2.new(0, 20, 0, 20)
    Checkbox.Position = UDim2.new(1, -30, 0.5, -10)
    Checkbox.BackgroundColor3 = Color3.fromRGB(66, 70, 77)
    local CheckCorner = Instance.new("UICorner", Checkbox)
    CheckCorner.CornerRadius = UDim.new(0, 4)
    local CheckBorder = Instance.new("UIStroke", Checkbox)
    CheckBorder.Color = Color3.fromRGB(30, 32, 37)
    CheckBorder.Thickness = 2

    local Checkmark = Instance.new("Frame", Checkbox)
    Checkmark.BackgroundColor3 = Library.Colors.Active
    Checkmark.Size = UDim2.new(1, -8, 1, -8)
    Checkmark.Position = UDim2.new(0.5, -0.5, 0.5, -0.5)
    Checkmark.Visible = false
    local MarkCorner = Instance.new("UICorner", Checkmark)
    MarkCorner.CornerRadius = UDim.new(0, 2)

    Library.Toggles[text] = false
    local Button = Instance.new("TextButton", ToggleShape)
    Button.Size = UDim2.new(1, 0, 1, 0)
    Button.BackgroundTransparency = 1
    Button.Text = ""
    Button.MouseButton1Click:Connect(function()
        Library.Toggles[text] = not Library.Toggles[text]
        Checkmark.Visible = Library.Toggles[text]
        pcall(callback, Library.Toggles[text])
    end)
end

function Library:AddSlider(tab, text, min, max, start, callback)
    local SliderShape = Library:CreateElementContainer(tab.Page, 50)
    
    local Label = Instance.new("TextLabel", SliderShape)
    Label.Size = UDim2.new(1, 0, 0, 20)
    Label.Position = UDim2.new(0, 0, 0, 5)
    Label.BackgroundTransparency = 1
    Label.Font = Enum.Font.Gotham
    Label.TextColor3 = Color3.fromRGB(220, 221, 222)
    Label.TextSize = 14
    Label.TextXAlignment = Enum.TextXAlignment.Left
    
    local SliderBack = Instance.new("Frame", SliderShape)
    SliderBack.Size = UDim2.new(1, 0, 0, 6)
    SliderBack.Position = UDim2.new(0, 0, 0, 30)
    SliderBack.BackgroundColor3 = Color3.fromRGB(30, 32, 37)
    local BackCorner = Instance.new("UICorner", SliderBack)
    BackCorner.CornerRadius = UDim.new(0, 3)

    local SliderFill = Instance.new("Frame", SliderBack)
    SliderFill.BackgroundColor3 = Color3.fromRGB(34, 197, 94) -- Green
    local FillCorner = Instance.new("UICorner", SliderFill)
    FillCorner.CornerRadius = UDim.new(0, 3)

    local Handle = Instance.new("Frame", SliderBack)
    Handle.Size = UDim2.new(0, 12, 0, 12)
    Handle.Position = UDim2.new(0, -6, 0.5, -6)
    Handle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    local HandleCorner = Instance.new("UICorner", Handle)
    HandleCorner.CornerRadius = UDim.new(1, 0)

    local function UpdateSlider(percent)
        percent = math.clamp(percent, 0, 1)
        local value = min + (max - min) * percent
        SliderFill.Size = UDim2.new(percent, 0, 1, 0)
        Handle.Position = UDim2.new(percent, -6, 0.5, -6)
        Label.Text = string.format("%s: %.1f", text, value)
        pcall(callback, value)
    end

    local DragButton = Instance.new("TextButton", SliderBack)
    DragButton.Size = UDim2.new(1, 0, 3, 0)
    DragButton.Position = UDim2.new(0, 0, 0.5, -9)
    DragButton.BackgroundTransparency = 1
    DragButton.Text = ""
    DragButton.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            local function OnMove()
                local relativeX = Mouse.X - SliderBack.AbsolutePosition.X
                local percent = relativeX / SliderBack.AbsoluteSize.X
                UpdateSlider(percent)
            end
            OnMove()
            local moveConn = Mouse.Move:Connect(OnMove)
            local upConn = UserInputService.InputEnded:Connect(function(upInput)
                if upInput.UserInputType == Enum.UserInputType.MouseButton1 then
                    moveConn:Disconnect()
                    upConn:Disconnect()
                end
            end)
        end
    end)
    
    UpdateSlider((start - min) / (max - min))
end

-- // Feature Logic (Core)
local Core = {}
Core.Connections = {}

function Core:SetSpeed(value)
    Library.Values.Speed = value
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
        LocalPlayer.Character.Humanoid.WalkSpeed = value
    end
end

function Core:SetJump(value)
    Library.Values.Jump = value
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
        LocalPlayer.Character.Humanoid.JumpPower = value
    end
end

function Core:ToggleESP(state)
    if state then
        Core.Connections.ESP = RunService.RenderStepped:Connect(function()
            for _, player in ipairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and player.Character and player.Character.PrimaryPart then
                    local espGui = player.Character:FindFirstChild("ESP_GUI")
                    if not espGui then
                        espGui = Instance.new("BillboardGui")
                        espGui.Name = "ESP_GUI"
                        espGui.Adornee = player.Character.PrimaryPart
                        espGui.Size = UDim2.new(0, 200, 0, 50)
                        espGui.AlwaysOnTop = true
                        espGui.Parent = player.Character

                        local box = Instance.new("Frame", espGui)
                        box.Size = UDim2.new(1, 0, 1, 0)
                        box.BackgroundTransparency = 1
                        local stroke = Instance.new("UIStroke", box)
                        stroke.Thickness = 2
                        
                        -- TODO: Implement proper team checks
                        if player.TeamColor == LocalPlayer.TeamColor then
                            stroke.Color = Color3.fromRGB(0, 112, 221) -- Blue for team
                        else
                            stroke.Color = Color3.fromRGB(235, 69, 95) -- Red for enemy
                        end
                    end
                end
            end
        end)
    else
        if Core.Connections.ESP then
            Core.Connections.ESP:Disconnect()
            Core.Connections.ESP = nil
        end
        for _, player in ipairs(Players:GetPlayers()) do
            if player.Character and player.Character:FindFirstChild("ESP_GUI") then
                player.Character.ESP_GUI:Destroy()
            end
        end
    end
end

-- // Build UI
-- General Tab
local generalTab = Library:CreateTab("General")
Library:AddSlider(generalTab, "Speed", 16, 200, 16, Core.SetSpeed)
Library:AddSlider(generalTab, "Jump", 50, 250, 50, Core.SetJump)
Library:AddButton(generalTab, "No Cooldown", function() print("No Cooldown activated") end)
Library:AddToggle(generalTab, "Kill Aura", function(state) print("Kill Aura:", state) end)
Library:AddToggle(generalTab, "Aimbot", function(state) print("Aimbot:", state) end)
Library:AddToggle(generalTab, "Infinity Jump", function(state) LocalPlayer.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, state) end)
Library:AddToggle(generalTab, "Safe Zone", function(state) if state and LocalPlayer.Character then LocalPlayer.Character:SetPrimaryPartCFrame(CFrame.new(500, 200, 500)) end end)
Library:AddToggle(generalTab, "Low Graphics", function(state) Lighting.Technology = state and Enum.Technology.Compatibility or Enum.Technology.Future end)

-- Green & Red Light Tab
local greenRedTab = Library:CreateTab("Green & Red")
Library:AddButton(greenRedTab, "Auto Complete", function() print("Teleporting to RLGL win area...") end)
Library:AddToggle(greenRedTab, "God Mode", function(state) if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then LocalPlayer.Character.Humanoid.MaxHealth = state and math.huge or 100; LocalPlayer.Character.Humanoid.Health = state and math.huge or 100 end end)

-- Dalgona Tab
local dalgonaTab = Library:CreateTab("Dalgona")
Library:AddToggle(dalgonaTab, "Auto Complete", function(state) print("Dalgona Auto Complete:", state) end)

-- Hide n Seek Tab
local hideSeekTab = Library:CreateTab("Hide n Seek")
Library:AddButton(hideSeekTab, "Teleport To Hider", function() print("Teleporting to nearest hider...") end)
Library:AddToggle(hideSeekTab, "Infinity Stamina", function(state) print("Infinity Stamina:", state) end)
Library:AddToggle(hideSeekTab, "Reveal Players", Core.ToggleESP)
Library:AddToggle(hideSeekTab, "Keys Reveal", function(state) print("Keys Reveal:", state) end)

-- Tug of War Tab
local tugWarTab = Library:CreateTab("Tug Of War")
Library:AddToggle(tugWarTab, "Auto Space", function(state) print("Auto Space:", state) end)

-- Glass Bridge Tab
local glassBridgeTab = Library:CreateTab("Glass Bridge")
Library:AddButton(glassBridgeTab, "Complete", function() print("Teleporting to Glass Bridge win area...") end)
Library:AddButton(glassBridgeTab, "Reveal Right Glass", function() print("Revealing correct glass path...") end)

-- Mingle Tab
local mingleTab = Library:CreateTab("Mingle")
Library:AddToggle(mingleTab, "Auto Choke", function(state) print("Auto Choke:", state) end)

-- Rebel Tab
local rebelTab = Library:CreateTab("Rebel")
Library:AddToggle(rebelTab, "Gun Modded", function(state) print("Gun Modded:", state) end)
Library:AddToggle(rebelTab, "Reveal Guards", function(state) print("Reveal Guards:", state) end)
Library:AddToggle(rebelTab, "Bring Guards", function(state) print("Bring Guards:", state) end)

-- Menu Tab (for settings, etc.)
local menuTab = Library:CreateTab("Menu")
-- TODO: Add keybind system here

-- // Finalize & Animate
-- Select the first tab by default
if Library.Tabs["General"] then
    Library.Tabs["General"].Button.MouseButton1Click:Invoke()
end

-- Intro Animation
local sound = Instance.new("Sound", SoundService)
sound.SoundId = "rbxassetid://5151552602" -- A subtle pop sound
sound.Volume = 0.3

MainFrame.Size = UDim2.new(0, 0, 0, 0)
MainFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
MainFrame.Visible = true
sound:Play()
MainFrame:TweenSizeAndPosition(
    UDim2.new(0, 600, 0, 400),
    UDim2.new(0.5, -300, 0.5, -200),
    "Out", "Back", 0.4, true
)

print("3rfe Hub Loaded.")
