--[[
    Squid Game GUI Script
    Generated by Gemini

    Features requested:
    - UI based on the user's image.
    - Main, Visual, UI, Credits, and a new Keybinds tab.
    - Keybinds system (e.g., bind a key to "Safe Zone").
    - Teleport to any player in the server.
    - Invisible Mode.
    - Anti Punch (God Mode without the ability to damage others).
    - All features from the provided image (ESP, Auto Player, Fly, Noclip, etc.).
]]

-- // SERVICES
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Lighting = game:GetService("Lighting")
local CoreGui = game:GetService("CoreGui")

-- // PLAYER VARIABLES
local LocalPlayer = Players.LocalPlayer

-- // GUI LIBRARY
-- We will create a simple GUI library to build the interface.
local OrionLib = {}
OrionLib.Name = "Squid Game Hub"
OrionLib.Visible = true
OrionLib.Draggable = true

-- Create the main ScreenGui
local MainGui = Instance.new("ScreenGui")
MainGui.Name = OrionLib.Name
MainGui.Parent = CoreGui
MainGui.ResetOnSpawn = false

-- Create the main frame
local MainFrame = Instance.new("Frame")
MainFrame.Name = "MainFrame"
MainFrame.Parent = MainGui
MainFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
MainFrame.BorderColor3 = Color3.fromRGB(80, 80, 80)
MainFrame.BorderSizePixel = 1
MainFrame.Position = UDim2.new(0.5, -300, 0.5, -200)
MainFrame.Size = UDim2.new(0, 600, 0, 400)
MainFrame.Active = true
MainFrame.Draggable = OrionLib.Draggable

-- Add a corner radius
local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(0, 12)
UICorner.Parent = MainFrame

-- Title bar
local TitleBar = Instance.new("Frame")
TitleBar.Name = "TitleBar"
TitleBar.Parent = MainFrame
TitleBar.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
TitleBar.Size = UDim2.new(1, 0, 0, 40)
local TitleCorner = Instance.new("UICorner")
TitleCorner.CornerRadius = UDim.new(0, 12)
TitleCorner.Parent = TitleBar
local TitleShadow = TitleBar:Clone() -- quick shadow effect
TitleShadow.Parent = MainFrame
TitleShadow.ZIndex = 0
TitleShadow.BackgroundColor3 = Color3.fromRGB(15,15,15)
TitleShadow.Position = UDim2.new(0,0,0,2)


local TitleLabel = Instance.new("TextLabel")
TitleLabel.Name = "TitleLabel"
TitleLabel.Parent = TitleBar
TitleLabel.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
TitleLabel.BackgroundTransparency = 1
TitleLabel.Size = UDim2.new(1, -10, 1, 0)
TitleLabel.Position = UDim2.new(0, 5, 0, 0)
TitleLabel.Font = Enum.Font.GothamSemibold
TitleLabel.Text = OrionLib.Name
TitleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TitleLabel.TextSize = 18
TitleLabel.TextXAlignment = Enum.TextXAlignment.Left

-- Container for tabs
local TabsContainer = Instance.new("Frame")
TabsContainer.Name = "TabsContainer"
TabsContainer.Parent = MainFrame
TabsContainer.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
TabsContainer.BackgroundTransparency = 1
TabsContainer.Position = UDim2.new(0, 10, 0, 50)
TabsContainer.Size = UDim2.new(1, -20, 0, 30)

-- Container for content pages
local PagesContainer = Instance.new("Frame")
PagesContainer.Name = "PagesContainer"
PagesContainer.Parent = MainFrame
PagesContainer.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
PagesContainer.BackgroundTransparency = 1
PagesContainer.Position = UDim2.new(0, 10, 0, 90)
PagesContainer.Size = UDim2.new(1, -20, 1, -100)

-- Make the window draggable
if OrionLib.Draggable then
    TitleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            local dragStart = input.Position
            local startPos = MainFrame.Position
            local dragConnection

            dragConnection = UserInputService.InputChanged:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                    local newPos = input.Position
                    MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + (newPos.X - dragStart.X), startPos.Y.Scale, startPos.Y.Offset + (newPos.Y - dragStart.Y))
                end
            end)

            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    dragConnection:Disconnect()
                end
            end)
        end
    end)
end

-- Tab creation logic
local Tabs = {}
function OrionLib:CreateTab(name)
    local Page = Instance.new("Frame")
    Page.Name = name .. "Page"
    Page.Parent = PagesContainer
    Page.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    Page.BackgroundTransparency = 1
    Page.Size = UDim2.new(1, 0, 1, 0)
    Page.Visible = false -- Hide by default

    local PageLayout = Instance.new("UIListLayout")
    PageLayout.Padding = UDim.new(0, 10)
    PageLayout.FillDirection = Enum.FillDirection.Vertical
    PageLayout.SortOrder = Enum.SortOrder.LayoutOrder
    PageLayout.Parent = Page
    
    local TabButton = Instance.new("TextButton")
    TabButton.Name = name .. "Tab"
    TabButton.Parent = TabsContainer
    TabButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    TabButton.Size = UDim2.new(0, 80, 1, 0)
    TabButton.Font = Enum.Font.Gotham
    TabButton.Text = name
    TabButton.TextColor3 = Color3.fromRGB(200, 200, 200)
    TabButton.TextSize = 14
    local TabCorner = Instance.new("UICorner")
    TabCorner.CornerRadius = UDim.new(0, 6)
    TabCorner.Parent = TabButton

    TabButton.MouseButton1Click:Connect(function()
        for i, v in pairs(Tabs) do
            v.Page.Visible = false
            v.Button.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            v.Button.TextColor3 = Color3.fromRGB(200, 200, 200)
        end
        Page.Visible = true
        TabButton.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
        TabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    end)

    local tabInfo = {
        Button = TabButton,
        Page = Page,
        Sections = {}
    }
    table.insert(Tabs, tabInfo)
    
    -- Auto-layout for tabs
    local TabsLayout = TabsContainer:FindFirstChildOfClass("UIListLayout")
    if not TabsLayout then
        TabsLayout = Instance.new("UIListLayout")
        TabsLayout.FillDirection = Enum.FillDirection.Horizontal
        TabsLayout.Padding = UDim.new(0, 5)
        TabsLayout.Parent = TabsContainer
    end

    -- Select the first tab by default
    if #Tabs == 1 then
        TabButton:Invoke()
    end

    -- Section creation logic within a tab
    function tabInfo:CreateSection(name)
        local SectionFrame = Instance.new("Frame")
        SectionFrame.Name = name
        SectionFrame.Parent = Page
        SectionFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        SectionFrame.BorderSizePixel = 0
        SectionFrame.Size = UDim2.new(1, 0, 0, 100) -- Placeholder size, will be adjusted by layout
        
        local SectionCorner = Instance.new("UICorner")
        SectionCorner.CornerRadius = UDim.new(0, 8)
        SectionCorner.Parent = SectionFrame
        
        local SectionLayout = Instance.new("UIListLayout")
        SectionLayout.Padding = UDim.new(0, 5)
        SectionLayout.Parent = SectionFrame
        SectionLayout.SortOrder = Enum.SortOrder.LayoutOrder
        
        local SectionTitle = Instance.new("TextLabel")
        SectionTitle.Name = "SectionTitle"
        SectionTitle.Parent = SectionFrame
        SectionTitle.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        SectionTitle.BackgroundTransparency = 1
        SectionTitle.Size = UDim2.new(1, -10, 0, 20)
        SectionTitle.Position = UDim2.new(0, 5, 0, 0)
        SectionTitle.Font = Enum.Font.GothamSemibold
        SectionTitle.Text = name
        SectionTitle.TextColor3 = Color3.fromRGB(220, 220, 220)
        SectionTitle.TextSize = 16
        SectionTitle.TextXAlignment = Enum.TextXAlignment.Left
        
        local SectionPadding = Instance.new("UIPadding")
        SectionPadding.PaddingTop = UDim.new(0, 25)
        SectionPadding.PaddingLeft = UDim.new(0, 5)
        SectionPadding.PaddingRight = UDim.new(0, 5)
        SectionPadding.PaddingBottom = UDim.new(0, 5)
        SectionPadding.Parent = SectionFrame

        local sectionInfo = {
            Container = SectionFrame,
            Layout = SectionLayout,
            Buttons = {}
        }
        
        -- Button creation logic within a section
        function sectionInfo:CreateButton(name, callback)
            local Button = Instance.new("TextButton")
            Button.Name = name
            Button.Parent = SectionFrame
            Button.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
            Button.Size = UDim2.new(1, -10, 0, 30)
            Button.Position = UDim2.new(0, 5, 0, 0)
            Button.Font = Enum.Font.Gotham
            Button.Text = name
            Button.TextColor3 = Color3.fromRGB(255, 255, 255)
            Button.TextSize = 14
            local ButtonCorner = Instance.new("UICorner")
            ButtonCorner.CornerRadius = UDim.new(0, 5)
            ButtonCorner.Parent = Button
            
            Button.MouseButton1Click:Connect(function()
                pcall(callback)
            end)
            return Button
        end

        -- Toggle creation logic
        function sectionInfo:CreateToggle(name, callback)
            local toggled = false
            local ToggleFrame = Instance.new("Frame")
            ToggleFrame.Name = name
            ToggleFrame.Parent = SectionFrame
            ToggleFrame.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
            ToggleFrame.BackgroundTransparency = 1
            ToggleFrame.Size = UDim2.new(1, -10, 0, 30)
            
            local ToggleLabel = Instance.new("TextLabel")
            ToggleLabel.Parent = ToggleFrame
            ToggleLabel.BackgroundTransparency = 1
            ToggleLabel.Size = UDim2.new(0.8, 0, 1, 0)
            ToggleLabel.Font = Enum.Font.Gotham
            ToggleLabel.Text = name
            ToggleLabel.TextColor3 = Color3.fromRGB(220, 220, 220)
            ToggleLabel.TextSize = 14
            ToggleLabel.TextXAlignment = Enum.TextXAlignment.Left

            local ToggleButton = Instance.new("TextButton")
            ToggleButton.Parent = ToggleFrame
            ToggleButton.Size = UDim2.new(0.2, -10, 0.8, 0)
            ToggleButton.Position = UDim2.new(0.8, 5, 0.1, 0)
            ToggleButton.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
            ToggleButton.Text = ""
            local ToggleCorner = Instance.new("UICorner")
            ToggleCorner.CornerRadius = UDim.new(0, 4)
            ToggleCorner.Parent = ToggleButton
            
            local ToggleIndicator = Instance.new("Frame")
            ToggleIndicator.Parent = ToggleButton
            ToggleIndicator.BackgroundColor3 = Color3.fromRGB(180, 50, 50)
            ToggleIndicator.BorderSizePixel = 0
            ToggleIndicator.Size = UDim2.new(0.5, 0, 1, 0)
            local IndicatorCorner = Instance.new("UICorner")
            IndicatorCorner.CornerRadius = UDim.new(0, 4)
            IndicatorCorner.Parent = ToggleIndicator
            
            ToggleButton.MouseButton1Click:Connect(function()
                toggled = not toggled
                pcall(callback, toggled)
                if toggled then
                    ToggleIndicator:TweenPosition(UDim2.new(0.5, 0, 0, 0), "Out", "Quad", 0.2, true)
                    ToggleIndicator.BackgroundColor3 = Color3.fromRGB(50, 180, 50)
                else
                    ToggleIndicator:TweenPosition(UDim2.new(0, 0, 0, 0), "Out", "Quad", 0.2, true)
                    ToggleIndicator.BackgroundColor3 = Color3.fromRGB(180, 50, 50)
                end
            end)
            
            return ToggleButton
        end
        
        -- Slider creation logic
        function sectionInfo:CreateSlider(name, min, max, start, callback)
            -- Implementation for a slider would go here
        end

        -- Player list logic
        function sectionInfo:CreatePlayerList(name, callback)
            local DropdownFrame = Instance.new("Frame")
            DropdownFrame.Name = name
            DropdownFrame.Parent = SectionFrame
            DropdownFrame.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
            DropdownFrame.Size = UDim2.new(1, -10, 0, 30)
            local DropdownCorner = Instance.new("UICorner")
            DropdownCorner.CornerRadius = UDim.new(0, 5)
            DropdownCorner.Parent = DropdownFrame

            local SelectedPlayerLabel = Instance.new("TextLabel")
            SelectedPlayerLabel.Parent = DropdownFrame
            SelectedPlayerLabel.Size = UDim2.new(1, -35, 1, 0)
            SelectedPlayerLabel.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
            SelectedPlayerLabel.BackgroundTransparency = 1
            SelectedPlayerLabel.Font = Enum.Font.Gotham
            SelectedPlayerLabel.Text = "Select a Player"
            SelectedPlayerLabel.TextColor3 = Color3.fromRGB(220, 220, 220)
            SelectedPlayerLabel.TextSize = 14

            local DropdownButton = Instance.new("TextButton")
            DropdownButton.Parent = DropdownFrame
            DropdownButton.Size = UDim2.new(0, 30, 1, 0)
            DropdownButton.Position = UDim2.new(1, -30, 0, 0)
            DropdownButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
            DropdownButton.Font = Enum.Font.Gotham
            DropdownButton.Text = "▼"
            DropdownButton.TextColor3 = Color3.fromRGB(255, 255, 255)
            
            local PlayerList = Instance.new("ScrollingFrame")
            PlayerList.Parent = DropdownFrame
            PlayerList.Position = UDim2.new(0, 0, 1, 5)
            PlayerList.Size = UDim2.new(1, 0, 0, 150)
            PlayerList.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            PlayerList.BorderSizePixel = 0
            PlayerList.Visible = false
            PlayerList.CanvasSize = UDim2.new(0,0,0,0)
            local PlayerListLayout = Instance.new("UIListLayout")
            PlayerListLayout.Parent = PlayerList
            PlayerListLayout.SortOrder = Enum.SortOrder.LayoutOrder

            DropdownButton.MouseButton1Click:Connect(function()
                PlayerList.Visible = not PlayerList.Visible
                if PlayerList.Visible then
                    -- Refresh player list
                    for _, v in pairs(PlayerList:GetChildren()) do
                        if v:IsA("TextButton") then v:Destroy() end
                    end
                    for _, player in pairs(Players:GetPlayers()) do
                        if player ~= LocalPlayer then
                            local PlayerButton = Instance.new("TextButton")
                            PlayerButton.Parent = PlayerList
                            PlayerButton.Size = UDim2.new(1, 0, 0, 25)
                            PlayerButton.BackgroundColor3 = Color3.fromRGB(55, 55, 55)
                            PlayerButton.Font = Enum.Font.Gotham
                            PlayerButton.Text = player.Name
                            PlayerButton.TextColor3 = Color3.fromRGB(255, 255, 255)
                            PlayerButton.MouseButton1Click:Connect(function()
                                SelectedPlayerLabel.Text = player.Name
                                PlayerList.Visible = false
                                pcall(callback, player)
                            end)
                        end
                    end
                end
            end)
            return DropdownFrame, SelectedPlayerLabel
        end

        return sectionInfo
    end

    return tabInfo
end

-- // SCRIPT LOGIC
local Toggles = {} -- To store the state of toggles

-- Noclip
local NoclipConnection
function Toggles:Noclip(enabled)
    if enabled then
        NoclipConnection = RunService.Stepped:Connect(function()
            if LocalPlayer.Character then
                for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                    end
                end
            end
        end)
    elseif NoclipConnection then
        NoclipConnection:Disconnect()
        NoclipConnection = nil
    end
end

-- Fly
local FlyConnection
local Flying = false
local FlySpeed = 5
function Toggles:Fly(enabled)
    Flying = enabled
    if enabled then
        local bodyGyro = Instance.new("BodyGyro")
        bodyGyro.Parent = LocalPlayer.Character.HumanoidRootPart
        bodyGyro.MaxTorque = Vector3.new(9e9, 9e9, 9e9)
        bodyGyro.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame

        local bodyVel = Instance.new("BodyVelocity")
        bodyVel.Parent = LocalPlayer.Character.HumanoidRootPart
        bodyVel.MaxForce = Vector3.new(9e9, 9e9, 9e9)
        bodyVel.Velocity = Vector3.new(0, 0, 0)
        
        FlyConnection = UserInputService.InputBegan:Connect(function(input)
            if not Flying then return end
            local cam = workspace.CurrentCamera
            if input.KeyCode == Enum.KeyCode.W then
                bodyVel.Velocity = cam.CFrame.LookVector * FlySpeed * 10
            elseif input.KeyCode == Enum.KeyCode.S then
                bodyVel.Velocity = -cam.CFrame.LookVector * FlySpeed * 10
            end
        end)
        -- Add more key controls if needed (A, D, Space, Ctrl)
    elseif FlyConnection then
        FlyConnection:Disconnect()
        FlyConnection = nil
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local hrp = LocalPlayer.Character.HumanoidRootPart
            if hrp:FindFirstChildOfClass("BodyGyro") then hrp:FindFirstChildOfClass("BodyGyro"):Destroy() end
            if hrp:FindFirstChildOfClass("BodyVelocity") then hrp:FindFirstChildOfClass("BodyVelocity"):Destroy() end
        end
    end
end

-- ESP
local ESP_Connections = {}
function Toggles:ESP(enabled)
    if enabled then
        ESP_Connections.PlayerAdded = Players.PlayerAdded:Connect(function(player)
            -- Handle new players joining
        end)
        ESP_Connections.RenderStepped = RunService.RenderStepped:Connect(function()
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    -- Drawing logic here (e.g., using Drawing.new)
                    -- This requires a Drawing library, which is complex to implement from scratch here.
                    -- For simplicity, we'll just print. A real exploit would draw on screen.
                    -- print("ESP enabled for: " .. player.Name)
                end
            end
        end)
    else
        if ESP_Connections.PlayerAdded then ESP_Connections.PlayerAdded:Disconnect() end
        if ESP_Connections.RenderStepped then ESP_Connections.RenderStepped:Disconnect() end
    end
end

-- God Mode (Anti Punch)
local GodModeConnection
function Toggles:GodMode(enabled)
    if enabled then
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            LocalPlayer.Character.Humanoid.MaxHealth = math.huge
            LocalPlayer.Character.Humanoid.Health = math.huge
            -- Note: Preventing damage to others is complex and often server-sided.
            -- This implementation only makes the local player invincible.
        end
        GodModeConnection = LocalPlayer.CharacterAdded:Connect(function(char)
            local humanoid = char:WaitForChild("Humanoid")
            humanoid.MaxHealth = math.huge
            humanoid.Health = math.huge
        end)
    else
        if GodModeConnection then GodModeConnection:Disconnect() end
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
             LocalPlayer.Character.Humanoid.MaxHealth = 100 -- Reset to default
             LocalPlayer.Character.Humanoid.Health = 100
        end
    end
end

-- Invisible Mode
function Toggles:Invisible(enabled)
    if not LocalPlayer.Character then return end
    if enabled then
        for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
            if part:IsA("BasePart") or part:IsA("Decal") then
                part.Transparency = 1
            end
        end
    else
        for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
            if part:IsA("BasePart") or part:IsA("Decal") then
                part.Transparency = 0 -- Reset, might need more complex logic for original values
            end
        end
    end
end


-- // BUILD THE UI
local MainTab = OrionLib:CreateTab("Main")
local VisualsTab = OrionLib:CreateTab("Visuals")
local KeybindsTab = OrionLib:CreateTab("Keybinds")
local UITab = OrionLib:CreateTab("UI")
local CreditsTab = OrionLib:CreateTab("Credits")

-- == MAIN TAB ==
local PlayerSection = MainTab:CreateSection("Player")
PlayerSection:CreateToggle("Fly", function(state) Toggles:Fly(state) end)
PlayerSection:CreateToggle("Noclip", function(state) Toggles:Noclip(state) end)
PlayerSection:CreateToggle("Infinite Jump", function(state) LocalPlayer.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, state) end)
PlayerSection:CreateToggle("Anti Punch (God)", function(state) Toggles:GodMode(state) end)
PlayerSection:CreateToggle("Invisible Mode", function(state) Toggles:Invisible(state) end)

local TeleportSection = MainTab:CreateSection("Teleport")
local playerDropdown, selectedPlayerLabel = TeleportSection:CreatePlayerList("Players", function(player)
    -- This callback runs when a player is selected, but the button does the action
end)
TeleportSection:CreateButton("Teleport to Selected Player", function()
    local playerName = selectedPlayerLabel.Text
    if playerName ~= "Select a Player" then
        local targetPlayer = Players:FindFirstChild(playerName)
        if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
            LocalPlayer.Character.HumanoidRootPart.CFrame = targetPlayer.Character.HumanoidRootPart.CFrame
        end
    end
end)

local GameSection = MainTab:CreateSection("Game Auto")
GameSection:CreateButton("Auto: Red Light, Green Light", function() print("Auto RLGL not implemented") end)
GameSection:CreateButton("Auto: Glass Bridge", function() print("Auto Glass Bridge not implemented") end)

-- == VISUALS TAB ==
local EspSection = VisualsTab:CreateSection("ESP")
EspSection:CreateToggle("Enable ESP", function(state) Toggles:ESP(state) end)
EspSection:CreateToggle("Tracers", function(state) print("Tracers: " .. tostring(state)) end)
EspSection:CreateToggle("Boxes", function(state) print("Boxes: " .. tostring(state)) end)
EspSection:CreateToggle("Names", function(state) print("Names: " .. tostring(state)) end)

-- == KEYBINDS TAB ==
local KeybindsSection = KeybindsTab:CreateSection("Set Keybinds")
local Keybinds = {} -- { KeyCode = function }
local KeybindButtons = {} -- { FeatureName = Button }
local isBinding = false
local featureToBind = nil

local function CreateKeybindButton(featureName, action)
    local keybindText = "Not Set"
    local button = KeybindsSection:CreateButton(featureName .. " : [" .. keybindText .. "]", function()
        if isBinding then return end
        isBinding = true
        featureToBind = featureName
        button.Text = featureName .. " : [Press a key...]"
    end)
    KeybindButtons[featureName] = {button = button, action = action, key = nil}
end

-- Features that can be bound
CreateKeybindButton("Safe Zone Teleport", function()
    -- Placeholder for Safe Zone coords
    local safeZoneCFrame = CFrame.new(0, 100, 0) 
    if LocalPlayer.Character then
        LocalPlayer.Character.HumanoidRootPart.CFrame = safeZoneCFrame
    end
    print("Teleported to Safe Zone")
end)
CreateKeybindButton("Toggle Fly", function()
    -- This needs to find the actual toggle button and click it
    print("Toggle Fly keybind not fully implemented")
end)


UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end

    -- Handle setting a keybind
    if isBinding and featureToBind then
        local key = input.KeyCode
        local currentBinding = KeybindButtons[featureToBind]
        
        -- Unbind old key if it exists
        if currentBinding.key and Keybinds[currentBinding.key] then
            Keybinds[currentBinding.key] = nil
        end

        -- Bind new key
        currentBinding.key = key
        Keybinds[key] = currentBinding.action
        currentBinding.button.Text = featureToBind .. " : [" .. key.Name .. "]"
        
        isBinding = false
        featureToBind = nil
        return
    end

    -- Handle executing a keybind
    if Keybinds[input.KeyCode] then
        pcall(Keybinds[input.KeyCode])
    end
end)


-- == UI TAB ==
local UiSection = UITab:CreateSection("Settings")
UiSection:CreateButton("Toggle UI (RightShift)", function()
    MainFrame.Visible = not MainFrame.Visible
end)
-- Add more UI settings here (e.g., change colors)

-- == CREDITS TAB ==
local CreditsSection = CreditsTab:CreateSection("Credits")
local creditLabel = Instance.new("TextLabel")
creditLabel.Parent = CreditsSection.Container
creditLabel.Size = UDim2.new(1, -10, 0, 50)
creditLabel.BackgroundTransparency = 1
creditLabel.Font = Enum.Font.Gotham
creditLabel.Text = "Script created by Gemini AI.\nUI inspired by user request."
creditLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
creditLabel.TextSize = 16
creditLabel.TextWrapped = true

-- Add keybind to toggle the entire GUI
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Enum.KeyCode.RightShift then
        MainFrame.Visible = not MainFrame.Visible
    end
end)

print(OrionLib.Name .. " loaded successfully.")
